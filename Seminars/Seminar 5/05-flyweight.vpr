// Flyweight
field val: Int

// Factory
field cache: Ref
field lock: Bool

// Helper macro for gaining access to the cache and lock
define myInvariant(this) (
  acc(this.cache, write) && 
  acc(this.lock, write) &&
  (this.cache != null ==> acc(this.cache.val, write))
)

// Helper macro to gain the write perms
define getWritePerms(this) {
  assert acc(this.lock, wildcard)
  inhale myInvariant(this)
}

// Helper macro to release the write
define releaseWritePerms(this) {
  exhale myInvariant(this)
}

method get(this: Ref) returns (fly: Ref)
  requires myInvariant(this)
  ensures acc(fly.val, wildcard)
{
  getWritePerms(this)
  
  if(this.cache == null) {
    fly := new(val)
    fly.val := 0
    this.cache := fly
  }
  
  fly := this.cache
  
  // Give up write access and give wildcard (read) access
  exhale acc(fly.val, write)
  inhale acc(fly.val, wildcard)
  
  releaseWritePerms(this)
}
