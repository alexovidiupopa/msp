method maxSum(x: Int, y: Int) returns (sum: Int, max: Int)
ensures sum == x + y
ensures max >= x
ensures max >= y
ensures max == x || max == y
{
    sum := x + y
    if (x >= y) {
        max := x
    } else {
        max := y
    }
}


method testMaxSum() 
{
    var s: Int
    var m: Int
    s, m := maxSum(1723, 42)
    
    assert s == 1765
    assert m == 1723
}

method reconstructMaxSum(sum: Int, max: Int) returns (x: Int, y: Int)
requires sum >= 2 * max // only works with this precondition
ensures x + y == sum
ensures max >= x || max <= x
ensures max >= y || max <= y
ensures max == x || max == y
{
    x := max
    y := sum - max
}


method testReconstructMaxSum()
{
    var x: Int
    var y: Int
    x, y := reconstructMaxSum(12, 6)
    
    assert x + y == 12
    assert x == 6 || y == 6
}