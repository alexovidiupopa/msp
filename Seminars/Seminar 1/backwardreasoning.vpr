method a(x: Int, y: Int) returns (X: Int, Y: Int) 
    requires true
    ensures X == y && Y == x
{
    // true
    X := y - x;
	//WP(X := y - x, y == y && (y - X) == x) => (y == y && (y - X) == x)[X/(y - x)] => y == y && (y - y + x) == x => y == y && x == x ==> true 
    Y := y - X;
	//WP(Y := y - X, (Y + X) == y && Y == x) => ((Y + X) == y && Y == x)[Y/(y - X)] => (y - X + X) == y && (y - X) == x => y == y && (y - X) == x
    X := Y + X;
	//WP(X := Y + X, X == y && Y == x) => (X == y && Y == x)[X/(Y + X)] => (Y + X) == y && Y == x
    // X == y && Y == x
}

method b() 
{
    // forall x Int :: forall y Int:: (x + y) * (1 - y) > 0 
    var x: Int;
    // forall y :: Int :: (x+y) * (1-y) > 0
    var y: Int;
	// (x + y) * (1 - y) > 0
    assume (x + y) * (1 - y) > 0;
    //assume (x + y > 0 && y < 1) || (x + y < 0 && y > 1);
	//assume (x + y) * (1 - y) > 0
    x := x + y;
	//WP(S1, WP(S2,Q)) = WP(x := x + y, x * (1 - y) > 0) = WP(S, Q) = Q[x/a] = (x * (1 - y) > 0)[x/(x + y)] = (x + y) * (1 - y) > 0
    y := x * y;
	//WP(S1, WP(S2, Q)) = WP(x := x + y, WP(y := x * y, x > y))
	//WP(y := x * y, x > y) = WP(S, Q) = Q[x/a] = (x > y)[(x * y)/y] = x > x * y = x * (1 - y) > 0
    assert x > y;
	//WP(S, Q) = WP(assert(x > y), Q) = R && Q = x > y && Q = x > y
}

method c() 
{
    // forall x :: Int
    var x: Int
    // forall y :: Int
    var y: Int
    assume (y > 5 && x > 7) ||  (y - x > 7 && y <= 5)
    // (y > 5 && x > 7) ||  (y - x > 7 && y <= 5)
    if (y > 5) {
        // x > 7; y > 5
        y := x - y
        // x > 7; x-y > 5
    } else {
        // x > 7 && y <= 5
        x := y - x
        // y-x > 7 && y <= 5 
    }
    // x > 7
    assert x > 7
    // true
}

method d(x: Int) returns (y: Int)
    requires x >= 17 || x <= 3
    ensures y % 2 == 0
{
    // x <= 3 || x >= 17
    if (x < 17) {
        // x < 17
        if (x > 3) { 
            // x > 3
            y := 1;
            // y = 1; y % 2 == 0 => false
			//WP(y := 1, y % 2 == 0) => (y % 2 == 0)[y/1] => 1 % 2 == 0 => false
        } else {
            // x <= 3
            y := 2; 
            // y = 2; y % 2 == 0 => true
			//WP(y := 2, y % 2 == 0) => (y % 2 == 0)[y/2] => 2 % 2 == 0 => true
        }
		//(x > 3 => false); (x <=3 => true) => x <= 3
    } else {
        // x >= 17
        y := 6
        // y = 6; y % 2 == 0 => true
		// WP(y := 6, y % 2 == 0) => (y % 2 == 0)[y/6] => 6 % 2 == 0 => true
    }
	//WP(if x < 17 then S1 else S4, y % 2 == 0) = (x < 17 ==> x <= 3) && (x >= 17 ==> true) => x <= 3 || x >= 17
}
