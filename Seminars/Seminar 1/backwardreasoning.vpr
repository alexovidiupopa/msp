method a(x: Int, y: Int) returns (z: Int)
    requires 0 <= x && x <= y && y < 100
    ensures z == y-x
{
  // 0 <= x && x <= y && y < 100
  z := y - x;
	// SP(P, S) = SP(0 <= x && x <= y && y < 100, z := y - x) = exists x0 :: (0 <= x && x <= y && y < 100)[x/x0] && z == (y - x)[x/x0]
	// exists x0 :: (0 <= x0 && x0 <= y && y < 100) && z == y - x0 => exists x0 :: (0 <= x0 && y - x0 >= 0 && y < 100) && z == y - x0 ==> z == y-x
}

method b()
{
  // true
  var x: Int;
	// exists x :: Int
	assume 0 <= x && x < 100;
	//P && R = 0 <= x && x < 100
	x := 2 * x;
	//exists x0 :: (0 <= x && x < 100)[x/x0] && x == (2 * x)[x/x0]
	//exists x0 :: (0 <= x0 && x0 < 100) && x == 2 * x0 => 0 <= 2*x < 200
	assert x % 2 == 0 && 0 <= x < 200;
	//P && R = x % 2 == 0 && 0 <= x < 200
}

method c()
{
  // true
  var x: Int;
	// exists x :: Int
	var y: Int;
	// exists y :: Int
  assume x > 0 && x < y;
	//P && R = x > 0 && x < y
	//SP(SP(P, S1), S2) = SP(SP(x > 0 && x < y, x := x + 23), y := y - 3 * x)
  x := x + 23;
	//SP(P, S1) = SP(x > 0 && x < y, x := x + 23) = exists x0 :: (x > 0 && x < y)[x/x0] && x == (x + 23)[x/x0]
	//exists x0 :: (x0 > 0 && x0 < y) && x == (x0 + 23)
  y := y - 3 * x;
	//SP(exists x0 :: (x0 > 0 && x0 < y) && x == (x0 + 23), y := y - 3 * x) = exists y0 :: (exists x0 :: (x0 > 0 && x0 < y) && x == (x0 + 23))[y/y0] && y == (y - 3 * x)[y/y0]
	//exists y0 :: exists x0 :: (x0 > 0 && x0 < y0) && x == x0 + 23 && y = y0 - 3 * x
	//y == y0 - 3 * (x0 + 23) => y == y0 - 3 * x0 - 69
  assert x > 23;
  //assert R => P && R = x > 23
}

method d() 
{
  // true
  var x: Int;
	//exists x :: Int
  var y: Bool;
	//exists y :: Bool
  assume x > 0;
	//assume R => P && R => x > 0
  x := x + 1;
	//exists x0 :: (x > 0)[x/x0] && x == (x + 1)[x0/0]
	//exists x0 :: x0 > 0 && x == x0 + 1 => x > 1
	//S1 [] S2 = SP(P, S1) || SP(P, S2) = SP(if B then S1 else S2, P) = SP(P && B, S1) || SP(P && !B, S2)
  if (y) {
    // y == true
    var z: Int;
		//exists z0 :: Int
    x := x + z;
		//SP(exists x0 :: x0 > 0 && x == x0 + 1 => x > 1, x := x + z) = exists x1 :: exists x0 :: exists z0 :: (x0 > 0 && x = x0 + 1)[x/x1] && x == (x + z)[x/x1]
		//exists x1 :: exists x0 :: exists z0 :: (x0 > 0 && x1 = x0 + 1) && x == x1 + z
  } else {
    // y == false
    x := 42;
    //SP(exists x0 :: x0 > 0 && x == x0 + 1 => x > 1, x := 42) = exists x1 :: exists x0 :: (x0 > 0 && x = x0 + 1)[x/x1] && x == 42[x/x1]
    //exists x1 :: exists x0 :: (x0 > 0 && x1 == x0 + 1) && x == 42
  }
	//(y == true && exists x1 :: exists x0 :: exists z0 :: (x0 > 0 && x1 = x0 + 1) && x == x1 + z) || (y == false && exists x1 :: exists x0 :: (x0 > 0 && x1 == x0 + 1) && x == 42)
  //assert R => P && R 
	//(y == true && exists x1 :: exists x0 :: exists z0 :: (x0 > 0 && x1 = x0 + 1) && x == x1 + z) || (y == false && exists x1 :: exists x0 :: (x0 > 0 && x1 == x0 + 1) && x == 42)
  assert y || x == 42;
	// y || x == 42	
}
