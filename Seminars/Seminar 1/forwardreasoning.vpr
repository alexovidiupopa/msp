// since we have the relationship 0 < x <= y < 100, the check if z is between 0 and 100 is implied from the precondition
// thus the strongest predicate is the equation itself
method a(x: Int, y: Int) returns (z: Int)
  requires 0 < x && x <= y && y < 100
  ensures z == y-x
{
  z := y - x
}


// from the assumption we know x is in [0, 100), so the strongest predicate is 2*x in [0, 198]
method b()
{
  var x: Int
  assume 0 <= x && x < 100
  x := 2 * x
  assert 0 <= x <= 198
}


method c() {
  var x: Int
  var y: Int
  assume x > 0 && x < y

  x := x + 23
  y := y - 3 * x

  assert x > 23
}


// the strongest predicate here comes from following the two branches
method d() {
  var x: Int
  var y: Bool

  assume x > 0

  x := x + 1
  if (y) {
    var z: Int
    x := x + z
  } else {
    x := 42
  }

  assert (y || x == 42)
}
