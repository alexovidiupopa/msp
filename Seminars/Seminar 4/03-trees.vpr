
method client() {
    var t: Tree
    t := node(node(leaf(3), leaf(17)), leaf(22))
    //TODO: should verify
    assert sum(t) == 42
    assert size(t) == 3
}

// same as 02-tree.vpr 
domain Tree { 

    // TODO: axiomatize sum and size

    function size(t: Tree): Int 
    function sum(t: Tree): Int

    // constructors
    function leaf(value: Int): Tree // <-- base case
    function node(left: Tree, right: Tree): Tree // composite case

    // discriminators (is_node is implicit via !is_leaf(t))
    function is_leaf(t: Tree): Bool 

    // destructors
    function value(t: Tree): Int 
    function left(t: Tree): Tree
    function right(t: Tree): Tree

    
    // axioms
    // Axiom: size of a leaf is 1
    axiom size_over_leaf {
        forall x: Int :: size(leaf(x)) == 1
    }

    // Axiom: size of a node is the sum of sizes of its children
    axiom size_over_node {
        forall l: Tree, r: Tree ::
            size(node(l, r)) == size(l) + size(r)
    }

    // Axiom: sum of a leaf is its value
    axiom sum_over_leaf {
        forall x: Int :: sum(leaf(x)) == x
    }

    // Axiom: sum of a node is the sum of sums of its children
    axiom sum_over_node {
        forall l: Tree, r: Tree ::
            sum(node(l, r)) == sum(l) + sum(r)
    }
    
    axiom def_is_leaf {
        forall x: Int :: is_leaf(leaf(x)) 
    }

    axiom def_not_is_leaf {
        forall l: Tree, r: Tree :: !is_leaf(node(l,r))
    }

    axiom all_variants {
        forall t: Tree ::
            (is_leaf(t) && exists x: Int :: t == leaf(x))
            || (!is_leaf(t) && exists l: Tree, r: Tree :: t == node(l, r))
    }

    axiom value_over_leaf {
        forall x: Int :: value(leaf(x)) == x
    }

    axiom left_over_node {
        forall l: Tree, r: Tree ::
            left(node(l, r)) == l
    }

    axiom right_over_node {
        forall l: Tree, r: Tree ::
            right(node(l, r)) == r
    }
}

